"""
–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –¥–∞–Ω–∏—Ö OPC UA (JSON —Ç–∞ Tree).
"""

import json
from typing import Any, Dict
from datetime import datetime


def _convert_to_serializable(obj: Any) -> Any:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î –æ–±'—î–∫—Ç —É JSON-—Å—É–º—ñ—Å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        obj: –û–±'—î–∫—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        
    Returns:
        JSON-—Å—É–º—ñ—Å–Ω–∏–π –æ–±'—î–∫—Ç
    """
    if isinstance(obj, dict):
        return {k: _convert_to_serializable(v) for k, v in obj.items()}
    elif isinstance(obj, (list, tuple)):
        return [_convert_to_serializable(item) for item in obj]
    elif isinstance(obj, (int, float, str, bool, type(None))):
        return obj
    else:
        return str(obj)


class JSONFormatter:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –≤ JSON."""
    
    @staticmethod
    def format(data: Dict[str, Any], timestamp: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ —É JSON.
        
        Args:
            data: –î–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            timestamp: –ú—ñ—Ç–∫–∞ —á–∞—Å—É
            
        Returns:
            JSON —Ä—è–¥–æ–∫
        """
        output = {
            "timestamp": timestamp,
            "data": _convert_to_serializable(data)
        }
        return json.dumps(output, ensure_ascii=False, indent=2)


class TreeFormatter:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞."""
    
    @staticmethod
    def format(data: Dict[str, Any], timestamp: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞.
        
        Args:
            data: –î–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            timestamp: –ú—ñ—Ç–∫–∞ —á–∞—Å—É
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
        """
        lines = [f"\n[{timestamp}]", "-" * 70, ""]
        
        for obj_name, variables in data.items():
            lines.append(f"üì¶ {obj_name}:")
            for var_name, value in variables.items():
                if isinstance(value, dict):
                    lines.append(f"   ‚îú‚îÄ {var_name}:")
                    for field_name, field_value in value.items():
                        lines.append(f"      ‚îÇ  {field_name}: {field_value}")
                else:
                    lines.append(f"   ‚îú‚îÄ {var_name}: {value}")
            lines.append("")
        
        return "\n".join(lines)


def format_output(data: Dict[str, Any], output_format: str = "tree", timestamp: str = None) -> str:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É.
    
    Args:
        data: –î–∞–Ω—ñ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        output_format: –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É ("json" –∞–±–æ "tree")
        timestamp: –ú—ñ—Ç–∫–∞ —á–∞—Å—É (—è–∫—â–æ None - –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
        
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫
    """
    if timestamp is None:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    
    if output_format == "json":
        return JSONFormatter.format(data, timestamp)
    else:
        return TreeFormatter.format(data, timestamp)

