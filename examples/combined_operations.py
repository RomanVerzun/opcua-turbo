#!/usr/bin/env python3
"""
–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è OPC UA Reader —Ç–∞ Writer.

–î–µ–º–æ–Ω—Å—Ç—Ä—É—î:
1. –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞
2. –ó–∞–ø–∏—Å –∑–Ω–∞—á–µ–Ω—å —á–µ—Ä–µ–∑ OPCUAWriter
3. –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Å—É
"""

import asyncio
import logging
from src.opcua import OPCUAReader, OPCUAWriter, format_output

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# URL OPC UA —Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = "opc.tcp://10.15.194.150:4840"


async def read_node_example():
    """–ü—Ä–∏–∫–ª–∞–¥ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞."""
    print("=" * 70)
    print("–ü–†–ò–ö–õ–ê–î 1: –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞ (cepn1)")
    print("=" * 70)

    async with OPCUAReader(SERVER_URL) as reader:
        # –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞
        data = await reader.read_node("cepn1")

        if data:
            print(f"\n–î–∞–Ω—ñ –≤—É–∑–ª–∞ 'cepn1':")
            print(format_output(data, format_type="tree"))
        else:
            print("–í—É–∑–æ–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


async def write_values_example():
    """–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É –∑–Ω–∞—á–µ–Ω—å."""
    print("\n" + "=" * 70)
    print("–ü–†–ò–ö–õ–ê–î 2: –ó–∞–ø–∏—Å –∑–Ω–∞—á–µ–Ω—å")
    print("=" * 70)

    async with OPCUAWriter(SERVER_URL) as writer:
        data = {
            "cepn1.sensor1": 1,
            "cepn1.sensor2": 1,
            "cepn1.sensor3": 1,
            "cepn1.sensor4": 1,
        }

        print(f"\n–ó–∞–ø–∏—Å—É—î–º–æ: {data}")
        results = await writer.write(data)

        success = sum(results.values())
        total = len(results)
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {success}/{total} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        for path, success in results.items():
            status = "‚úì" if success else "‚úó"
            print(f"  {status} {path}")


async def read_write_cycle_example():
    """–ü—Ä–∏–∫–ª–∞–¥ —Ü–∏–∫–ª—É: —á–∏—Ç–∞–Ω–Ω—è -> –∑–∞–ø–∏—Å -> —á–∏—Ç–∞–Ω–Ω—è."""
    print("\n" + "=" * 70)
    print("–ü–†–ò–ö–õ–ê–î 3: –¶–∏–∫–ª —á–∏—Ç–∞–Ω–Ω—è-–∑–∞–ø–∏—Å-—á–∏—Ç–∞–Ω–Ω—è")
    print("=" * 70)

    # 1. –ß–∏—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    print("\n1. –ß–∏—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è...")
    async with OPCUAReader(SERVER_URL) as reader:
        data_before = await reader.read_node("cepn1")
        if data_before and "cepn1" in data_before:
            test_value_before = data_before["cepn1"].get("test", "N/A")
            print(f"   –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è 'cepn1.test': {test_value_before}")

    # 2. –ó–∞–ø–∏—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    print("\n2. –ó–∞–ø–∏—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è...")
    new_value = 42
    async with OPCUAWriter(SERVER_URL) as writer:
        results = await writer.write({"cepn1.test": new_value})
        if results.get("cepn1.test"):
            print(f"   ‚úì –ó–∞–ø–∏—Å–∞–Ω–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {new_value}")
        else:
            print(f"   ‚úó –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É")

    # 3. –ß–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
    print("\n3. –ß–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É...")
    async with OPCUAReader(SERVER_URL) as reader:
        data_after = await reader.read_node("cepn1")
        if data_after and "cepn1" in data_after:
            test_value_after = data_after["cepn1"].get("test", "N/A")
            print(f"   –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è 'cepn1.test': {test_value_after}")


async def read_all_example():
    """–ü—Ä–∏–∫–ª–∞–¥ —á–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—É–∑–ª—ñ–≤."""
    print("\n" + "=" * 70)
    print("–ü–†–ò–ö–õ–ê–î 4: –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤")
    print("=" * 70)

    async with OPCUAReader(SERVER_URL) as reader:
        # –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
        all_data = await reader.read_all()

        print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ –≤—É–∑–ª—ñ–≤: {len(all_data)}")
        print("\n–°–ø–∏—Å–æ–∫ –≤—É–∑–ª—ñ–≤:")
        for node_name in all_data.keys():
            print(f"  - {node_name}")

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
        cache_stats = reader.get_cache_stats()
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:")
        print(f"  Hits: {cache_stats['hits']}")
        print(f"  Misses: {cache_stats['misses']}")
        print(f"  Total: {cache_stats['total']}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏."""
    print("\nüöÄ OPC UA Reader & Writer - –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\n")

    try:
        # –ü—Ä–∏–∫–ª–∞–¥ 1: –ß–∏—Ç–∞–Ω–Ω—è –≤—É–∑–ª–∞
        await read_node_example()

        # –ü—Ä–∏–∫–ª–∞–¥ 2: –ó–∞–ø–∏—Å –∑–Ω–∞—á–µ–Ω—å
        await write_values_example()

        # –ü—Ä–∏–∫–ª–∞–¥ 3: –¶–∏–∫–ª —á–∏—Ç–∞–Ω–Ω—è-–∑–∞–ø–∏—Å-—á–∏—Ç–∞–Ω–Ω—è
        await read_write_cycle_example()

        # –ü—Ä–∏–∫–ª–∞–¥ 4: –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
        await read_all_example()

        print("\n‚úì –í—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    except Exception as e:
        print(f"\n‚úó –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
