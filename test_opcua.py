#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è OPC UA Reader & Writer
"""

import asyncio
from opcua import OPCUAReader, TypeCache
from opcua_writer import write_values
from asyncua import Client

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
SERVER_URL = "opc.tcp://10.15.194.150:4840"
TEST_NODE = "cepn1"


# ============================================================================
# –¢–µ—Å—Ç–∏ —á–∏—Ç–∞–Ω–Ω—è
# ============================================================================

async def test_reader_connect():
    """–¢–µ—Å—Ç 1: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    reader = OPCUAReader(SERVER_URL)
    await reader.connect()
    assert reader.client is not None
    await reader.disconnect()


async def test_reader_context_manager():
    """–¢–µ—Å—Ç 2: Context manager"""
    async with OPCUAReader(SERVER_URL) as reader:
        assert reader.client is not None


async def test_read_single_node():
    """–¢–µ—Å—Ç 3: –ß–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –≤—É–∑–ª–∞"""
    async with OPCUAReader(SERVER_URL) as reader:
        data = await reader.read_node(TEST_NODE)
        assert data is not None
        assert TEST_NODE in data
        assert isinstance(data[TEST_NODE], dict)


async def test_read_all_nodes():
    """–¢–µ—Å—Ç 4: –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤"""
    async with OPCUAReader(SERVER_URL) as reader:
        data = await reader.read_all()
        assert data is not None
        assert len(data) > 0
        assert isinstance(data, dict)


async def test_cache_stats():
    """–¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É"""
    async with OPCUAReader(SERVER_URL) as reader:
        await reader.read_node(TEST_NODE)
        stats = reader.get_cache_stats()
        assert "hits" in stats
        assert "misses" in stats
        assert "total" in stats


# ============================================================================
# –¢–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—É
# ============================================================================

async def test_write_single_value():
    """–¢–µ—Å—Ç 6: –ó–∞–ø–∏—Å –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è"""
    data = {f"{TEST_NODE}.test": 1}
    
    async with Client(SERVER_URL) as client:
        results = await write_values(client, data)
        assert len(results) == 1
        assert results[f"{TEST_NODE}.test"] is True


async def test_write_multiple_values():
    """–¢–µ—Å—Ç 7: –ó–∞–ø–∏—Å –∫—ñ–ª—å–∫–æ—Ö –∑–Ω–∞—á–µ–Ω—å"""
    data = {
        f"{TEST_NODE}.test": 1,
        f"{TEST_NODE}.sensor1": 1,
    }
    
    async with Client(SERVER_URL) as client:
        results = await write_values(client, data)
        assert len(results) == 2
        assert sum(results.values()) >= 1  # –•–æ—á–∞ –± –æ–¥–Ω–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—è


# ============================================================================
# –¢–µ—Å—Ç–∏ –∫–µ—à—É
# ============================================================================

def test_type_cache():
    """–¢–µ—Å—Ç 8: TypeCache"""
    cache = TypeCache()
    
    # –¢–µ—Å—Ç set/get
    cache.set_definition("test_id", {"field": "value"})
    result = cache.get_definition("test_id")
    assert result == {"field": "value"}
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = cache.get_stats()
    assert stats["total"] == 1


# ============================================================================
# –¢–µ—Å—Ç–∏ –ø–æ–º–∏–ª–æ–∫
# ============================================================================

async def test_read_nonexistent_node():
    """–¢–µ—Å—Ç 9: –ß–∏—Ç–∞–Ω–Ω—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –≤—É–∑–ª–∞"""
    async with OPCUAReader(SERVER_URL) as reader:
        data = await reader.read_node("nonexistent_node_12345")
        assert data is None


async def test_read_write_cycle():
    """–¢–µ—Å—Ç 10: –¶–∏–∫–ª —á–∏—Ç–∞–Ω–Ω—è-–∑–∞–ø–∏—Å-—á–∏—Ç–∞–Ω–Ω—è"""
    # –ß–∏—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    async with OPCUAReader(SERVER_URL) as reader:
        data_before = await reader.read_node(TEST_NODE)
        assert data_before is not None
    
    # –ó–∞–ø–∏—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    new_value = 1
    async with Client(SERVER_URL) as client:
        results = await write_values(client, {f"{TEST_NODE}.test": new_value})
        assert results[f"{TEST_NODE}.test"] is True
    
    # –ß–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
    async with OPCUAReader(SERVER_URL) as reader:
        data_after = await reader.read_node(TEST_NODE)
        assert data_after is not None
        assert data_after[TEST_NODE]["test"] == new_value


# ============================================================================
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
# ============================================================================

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ OPC UA\n")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ –±–µ–∑ pytest (–¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)
    async def run_all_tests():
        tests = [
            ("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", test_reader_connect),
            ("Context manager", test_reader_context_manager),
            ("–ß–∏—Ç–∞–Ω–Ω—è –≤—É–∑–ª–∞", test_read_single_node),
            ("–ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö", test_read_all_nodes),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É", test_cache_stats),
            ("–ó–∞–ø–∏—Å –æ–¥–Ω–æ–≥–æ", test_write_single_value),
            ("–ó–∞–ø–∏—Å –∫—ñ–ª—å–∫–æ—Ö", test_write_multiple_values),
            ("–ù–µ—ñ—Å–Ω—É—é—á–∏–π –≤—É–∑–æ–ª", test_read_nonexistent_node),
            ("–¶–∏–∫–ª read-write", test_read_write_cycle),
        ]
        
        passed = 0
        failed = 0
        
        for name, test_func in tests:
            try:
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"‚úì {name}")
                passed += 1
            except Exception as e:
                print(f"‚úó {name}: {e}")
                failed += 1
        
        print("=" * 60)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø–æ–º–∏–ª–æ–∫")
        
        # TypeCache —Ç–µ—Å—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π)
        try:
            test_type_cache()
            print(f"‚úì TypeCache")
            passed += 1
        except Exception as e:
            print(f"‚úó TypeCache: {e}")
            failed += 1
        
        print(f"\nüìä –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{passed + failed} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    asyncio.run(run_all_tests())

