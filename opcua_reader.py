#!/usr/bin/env python3
"""
OPC UA Smart Reader CLI - Command Line Interface –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ OPC UA.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–æ–¥—É–ª—å–Ω–∏–π –ø–∞–∫–µ—Ç opcua –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.
"""

import sys
import asyncio
import argparse
import json
from datetime import datetime
from typing import Optional

from opcua import OPCUAReader, TARGET_OBJECT_NAME, format_output
from opcua.navigator import find_specific_object
from opcua.reader import find_and_read_variable, read_object_children
from opcua.cache import TypeCache


async def main(url: str, output_format: str = "tree", debug: bool = False, target_node: Optional[str] = None):
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è CLI.
    
    Args:
        url: URL OPC UA —Å–µ—Ä–≤–µ—Ä–∞
        output_format: –§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É ("json" –∞–±–æ "tree")
        debug: –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏
        target_node: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –≤—É–∑–æ–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    """
    if output_format == "tree":
        print("‚úì OPC UA Smart Reader v2.0\n")
        print(f"{'='*70}")
        print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ: {url}")
        print(f"{'='*70}\n")
    
    try:
        async with OPCUAReader(url) as reader:
            if output_format == "tree":
                print("‚úì –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞\n")
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
            
            # –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            if target_node:
                if output_format == "tree":
                    print(f"üéØ –ß–∏—Ç–∞–Ω–Ω—è –≤—É–∑–ª–∞: {target_node}\n")
                
                data = await reader.read_node(target_node)
                
                if not data:
                    if output_format == "tree":
                        print(f"‚ö† –í—É–∑–æ–ª '{target_node}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n")
                    else:
                        print(json.dumps({"error": f"Node '{target_node}' not found"}, ensure_ascii=False))
                    return
            else:
                data = await reader.read_all()
            
            # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            output = format_output(data, output_format, timestamp)
            print(output)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É –≤ debug —Ä–µ–∂–∏–º—ñ
            if debug and output_format == "tree":
                stats = reader.get_cache_stats()
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:")
                print(f"   Hits: {stats['hits']}, Misses: {stats['misses']}")
                print(f"   Hit rate: {stats['hit_rate']}%")
            
            if output_format == "tree":
                print("\n‚úì –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞")
                
    except RuntimeError as e:
        if output_format == "tree":
            print(f"‚ö† {e}\n")
        else:
            print(json.dumps({"error": str(e)}, ensure_ascii=False))
        sys.exit(1)
        
    except Exception as e:
        if output_format == "tree":
            print(f"\n‚úó –ü–æ–º–∏–ª–∫–∞: {e}")
            print(f"–¢–∏–ø: {type(e).__name__}")
        else:
            print(json.dumps({"error": str(e), "type": type(e).__name__}, ensure_ascii=False))
        sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="OPC UA Smart Reader - —à–≤–∏–¥–∫–µ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ OPC UA —Å–µ—Ä–≤–µ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏:
  # –ß–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—É–∑–ª—ñ–≤
  python opcua_reader.py opc.tcp://localhost:4840
  
  # –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞
  python opcua_reader.py opc.tcp://localhost:4840 --node cepn1
  
  # JSON —Ñ–æ—Ä–º–∞—Ç
  python opcua_reader.py opc.tcp://localhost:4840 --node valve1 --format json
        """
    )
    
    parser.add_argument(
        'url',
        help='URL OPC UA —Å–µ—Ä–≤–µ—Ä–∞ (opc.tcp://server:port)'
    )
    
    parser.add_argument(
        '--node',
        type=str,
        default=None,
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –≤—É–∑–æ–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è'
    )
    
    parser.add_argument(
        '--format',
        choices=['tree', 'json'],
        default='tree',
        help='–§–æ—Ä–º–∞—Ç –≤–∏–≤–æ–¥—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: tree)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏ –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é'
    )
    
    args = parser.parse_args()
    
    try:
        asyncio.run(main(args.url, output_format=args.format, debug=args.debug, target_node=args.node))
    except KeyboardInterrupt:
        if args.format == "tree":
            print("\n\n‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)

